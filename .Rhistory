symbol = character(),
cagr = double(),
dd = double(),
pi = double(),
stringsAsFactors=FALSE)
df.subset = subset(df,floor(data.period) == 9)
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
rbind(df.metrics,Return.annualized(dailyreturns, scale = NA, geometric = TRUE))
}
df.metrics
all.stocks.list
all.stocks.list[[1]]
all.stocks.list[[2]]
all.stocks.list[[3]]
df.metrics
df.subset = subset(df,floor(data.period) == 9)
df.subset
df <- data.frame(read_excel("etfdb_data.xls"))
df
df <- data.frame(read_excel("etfdb_data.xls"))
colnames(df) = c("symbol","name","etfdb.category","inception.date","expense.ratio","commission.free","expenses.rating")
# Correct Excel format date for inception date
df$inception.date = as.Date(df$inception.date,origin = "1899-12-30")
df["c.issuer"] = gsub( " .*$", "", df$name )
df["data.period"] = NA
scrapeOHLC(df)
all.stocks.list = fetchOHLC(df)
all.stocks.list
for (i in 1:nrow(df)){
df$data.period[i] = try(floor((last(index(all.stocks.list[[i]]))) - first(index(all.stocks.list[[i]])))/365)
}
df
head(df)
df.metrics["cagr"]
df.metrics["pi"]
df.metrics["dd"]
head(df)
df.metrics
# Initialize empty df
df.metrics <- data.frame(Timeframe = character(),
symbol = character(),
cagr = double(),
dd = double(),
pi = double(),
stringsAsFactors=FALSE)
df.metrics
df.subset = subset(df,floor(data.period) == 9)
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
rbind(df.metrics,Return.annualized(dailyreturns, scale = NA, geometric = TRUE))
}
df.subset
nrow(df.subset)
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE))
}
symbol
symbol = df.subset$symbol[i]
symbol
symbol = df.subset$symbol[2]
symbol
index = grep(symbol,df$symbol)
index
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
dailyreturns
Return.annualized(dailyreturns, scale = NA, geometric = TRUE))
Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
class(Return.annualized(dailyreturns, scale = NA, geometric = TRUE) )
core(Return.annualized(dailyreturns, scale = NA, geometric = TRUE))
Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
Return.annualized(dailyreturns, scale = NA, geometric = TRUE)$adjusted
Return.annualized(dailyreturns, scale = NA, geometric = TRUE)[1,1]
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)[1,1]
}
df.metrics <- data.frame(Timeframe = character(),
symbol = "",
cagr = 1,
dd = 1,
pi = 1,
stringsAsFactors=FALSE)
df.subset = subset(df,floor(data.period) == 9)
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
df.metrics$cagr
df.metrics$cagr[1]
df.metrics$cagr[1] = 0
matrix(NA,ncol = 2,nrow =4)
df.metrics <- data.frame(matrix(NA,ncol = 5,nrow = nrow(df.subset)))
df.metrics
df.metrics <- data.frame(matrix(NA,ncol = 5,nrow = nrow(df.subset)))
colnames(df.metrics) = c("timeframe","symbol","cagr","dd","pi")
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
all.stocks.list[[2]]
all.stocks.list[[3]]
all.stocks.list[[4]]
all.stocks.list[[2]]
for (i in 1:2)){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
for (i in 1:2){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
df.metrics
rm(df.metrics)
df.metrics <- data.frame(matrix(NA,ncol = 5,nrow = nrow(df.subset)))
colnames(df.metrics) = c("timeframe","symbol","cagr","dd","pi")
for (i in 1:2){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
df.metrics
df.metrics <- data.frame(matrix(NA,ncol = 5,nrow = nrow(df.subset)))
colnames(df.metrics) = c("timeframe","symbol","cagr","dd","pi")
for (i in 1:10){
symbol = df.subset$symbol[i]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
df.metrics
for (i in 1:10){
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
for (i in 1:50){
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
df.metrics
df.subset$symbol[19]
symbol = df.subset$symbol[i]
symbol = df.subset$symbol[19]
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
dailyreturns
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.metrics
i = 20
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
index
i = 19
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
index
i = 20
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(symbol,df$symbol)
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
index
symbol
symbol
df.metrics
symbol
df$symbol
grep(symbol,df$symbol)
df$symbol[56]
df$symbol[95]
df$symbol[105]
df$symbol[103]
?grep
for (i in 1:50){
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(symbol,df$symbol,fixed = TRUE) # needs to be fixed = TRUE for the pattern to exactly match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
i
index
for (i in 1:50){
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(symbol,df$symbol,fixed = TRUE) # needs to be fixed = TRUE for the pattern to exactly match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
index
paste("^",symbol,"$")
for (i in 1:50){
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(paste("^",symbol,"$",sep = ""),df$symbol,fixed = TRUE) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
paste("^",symbol,"$",sep = "")
for (i in 1:50){
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(paste("^",symbol,"$",sep = ""),df$symbol,fixed = TRUE) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
i
paste("^",symbol,"$",sep = "")
grep(paste("^",symbol,"$",sep = ""),df$symbol)
for (i in 1:50){
symbol = df.subset$symbol[i]
df.metrics$symbol = symbol
index = grep(paste("^",symbol,"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
}
df.metrics
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(paste("^",symbol,"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.metrics$timeframe[i] = '9 years'
df.metrics$symbol[i] = symbol
df.metrics$ddl[i] = DownsideDeviation(dailyreturns, MAR = 0,method = "subset")
df.metrics$pi[i] = PainIndex(dailyreturns, geometric = TRUE, invert = TRUE)
}
df.metrics
setwd("/Volumes/DATA/Github/LazyPortfolioAnalytics")
# Load libraries
library(readxl)
library(rPref)  # for psel
library(ggplot2)
library(scales)  # for percent
library(ggrepel)  # for geom_text_repel
library(gridExtra) # for grid.arrange
library(dplyr) # for last
library(xts)
library(PerformanceAnalytics)
# Load list of ETFs
df <- data.frame(read_excel("etfdb_data.xls"))
colnames(df) = c("symbol","name","etfdb.category","inception.date","expense.ratio","commission.free","expenses.rating")
# Correct Excel format date for inception date
df$inception.date = as.Date(df$inception.date,origin = "1899-12-30")
df["c.issuer"] = gsub( " .*$", "", df$name )
df["data.period"] = NA
# source("scrapeOHLC.R")
source("fetchOHLC.R")
# scrapeOHLC(df)
all.stocks.list = fetchOHLC(df)
# Symbols that don't have data have a data time length of 0
for (i in 1:nrow(df)){
df$data.period[i] = try(floor((last(index(all.stocks.list[[i]]))) - first(index(all.stocks.list[[i]])))/365)
}
# Initialize empty df
df.subset = subset(df,floor(data.period) == 9)
df.metrics <- data.frame(matrix(NA,ncol = 5,nrow = nrow(df.subset)))
colnames(df.metrics) = c("timeframe","symbol","cagr","dd","pi")
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(paste("^",symbol,"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.metrics$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.metrics$timeframe[i] = '9 years'
df.metrics$symbol[i] = symbol
df.metrics$dd[i] = DownsideDeviation(dailyreturns, MAR = 0,method = "subset")
df.metrics$pi[i] = PainIndex(dailyreturns, geometric = TRUE, invert = TRUE)
}
df.metrics
?merge
df.subset
# Initialize empty df
df.subset = subset(df,floor(data.period) == 9)
df.subset["timeframe"]
df.subset["symbol"]
df.subset["cagr"]
df.subset["dd"]
df.subset["pi"]
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(paste("^",symbol,"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.subset$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.subset$timeframe[i] = '9 years'
df.subset$symbol[i] = symbol
df.subset$dd[i] = DownsideDeviation(dailyreturns, MAR = 0,method = "subset")
df.subset$pi[i] = PainIndex(dailyreturns, geometric = TRUE, invert = TRUE)
}
# Initialize empty df
df.subset = subset(df,floor(data.period) == 9)
df.subset["timeframe"] = NA
df.subset["symbol"] = NA
df.subset["cagr"] = NA
df.subset["dd"] = NA
df.subset["pi"] = NA
df.subset
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(paste("^",symbol,"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.subset$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.subset$timeframe[i] = '9 years'
df.subset$symbol[i] = symbol
df.subset$dd[i] = DownsideDeviation(dailyreturns, MAR = 0,method = "subset")
df.subset$pi[i] = PainIndex(dailyreturns, geometric = TRUE, invert = TRUE)
}
df.subset
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(paste("^",symbol,"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.subset$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.subset$timeframe[i] = '9 years'
df.subset$dd[i] = DownsideDeviation(dailyreturns, MAR = 0,method = "subset")
df.subset$pi[i] = PainIndex(dailyreturns, geometric = TRUE, invert = TRUE)
}
# Initialize empty df
df.subset = subset(df,floor(data.period) == 9)
df.subset["timeframe"] = NA
df.subset["symbol"] = NA
df.subset["cagr"] = NA
df.subset["dd"] = NA
df.subset["pi"] = NA
for (i in 1:nrow(df.subset)){
symbol = df.subset$symbol[i]
index = grep(paste("^",symbol,"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.subset$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.subset$timeframe[i] = '9 years'
df.subset$dd[i] = DownsideDeviation(dailyreturns, MAR = 0,method = "subset")
df.subset$pi[i] = PainIndex(dailyreturns, geometric = TRUE, invert = TRUE)
}
i
symbol
index
for (i in 1:nrow(df.subset)){
index = grep(paste("^",df.subset$symbol[i],"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.subset$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.subset$timeframe[i] = '9 years'
df.subset$dd[i] = DownsideDeviation(dailyreturns, MAR = 0,method = "subset")
df.subset$pi[i] = PainIndex(dailyreturns, geometric = TRUE, invert = TRUE)
}
index
grep(paste("^",df.subset$symbol[i],"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
df.subset$symbol[i]
df.subset$symbol[1]
df.subset
df
head(df)
# Initialize empty df
df.subset = subset(df,floor(data.period) == 9)
df.subset["timeframe"] = NA
df.subset["symbol"] = NA
df.subset["cagr"] = NA
df.subset["dd"] = NA
df.subset["pi"] = NA
head(df.subset)
# Initialize empty df
df.subset = subset(df,floor(data.period) == 9)
df.subset["timeframe"] = NA
df.subset["cagr"] = NA
df.subset["dd"] = NA
df.subset["pi"] = NA
for (i in 1:nrow(df.subset)){
index = grep(paste("^",df.subset$symbol[i],"$",sep = ""),df$symbol) # need to insert word anchors to ensure exact string match
dailyreturns = na.omit(last(Return.calculate(all.stocks.list[[index]]$adjusted),'9 years'))
df.subset$cagr[i] = Return.annualized(dailyreturns, scale = NA, geometric = TRUE)
df.subset$timeframe[i] = '9 years'
df.subset$dd[i] = DownsideDeviation(dailyreturns, MAR = 0,method = "subset")
df.subset$pi[i] = PainIndex(dailyreturns, geometric = TRUE, invert = TRUE)
}
df.subset
plot = ggplot() +
geom_point(data = df.subset,aes(x = cagr,y = expense.ratio)) +
geom_text_repel(data = df.subset,aes(x = cagr,y = expense.ratio,label = df.subset$symbol)) +
ggtitle("lala") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot
cor(df.subset$expense.ratio,df.subset$cagr)
plot = ggplot() +
geom_point(data = df.subset,aes(x = expense.ratio,y = cagr)) +
geom_text_repel(data = df.subset,aes(x = expense.ratio,y = cagr,label = df.subset$symbol)) +
ggtitle("lala") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
facet(etfdb.category ~ .)
plot
plot = ggplot() +
geom_point(data = df.subset,aes(x = expense.ratio,y = cagr)) +
geom_text_repel(data = df.subset,aes(x = expense.ratio,y = cagr,label = df.subset$symbol)) +
ggtitle("lala") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
facet_grid(. ~ etfdb.category, scales = "free")
plot
plot = ggplot() +
geom_point(data = df.subset,aes(x = pi,y = cagr)) +
geom_text_repel(data = df.subset,aes(x = pi,y = cagr,label = df.subset$symbol)) +
ggtitle("lala") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
facet_grid(. ~ etfdb.category, scales = "free")
plot
plot = ggplot() +
geom_point(data = df.subset,aes(x = pi,y = cagr,size = expense.ratio)) +
geom_text_repel(data = df.subset,aes(x = pi,y = cagr,label = df.subset$symbol)) +
ggtitle("lala") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
facet_grid(. ~ etfdb.category, scales = "free")
plot
cor(df.subset$expense.ratio,df.subset$dd)
cor(df.subset$expense.ratio,df.subset$pi)
cor(df.subset$expense.ratio,df.subset$cagr)
cor(df.subset$dd,df.subset$cagr)
cor(df.subset$dd,df.subset$pi)
"WMW"
df.subset
grep("WMW",df.subset$symbol)
df.subset$name$[grep("WMW",df.subset$symbol)]
df.subset$name[grep("WMW",df.subset$symbol)]
df.subset$name[grep("WM",df.subset$symbol)]
df.subset$name[grep("^WM$",df.subset$symbol)]
df.subset$name[grep("^QQQ$",df.subset$symbol)]
?updown
df.subset
plot = ggplot() +
geom_point(data = df.subset,aes(x = pi,y = cagr,size = expense.ratio)) +
geom_text_repel(data = df.subset,aes(x = pi,y = cagr,label = df.subset$symbol)) +
ggtitle("lala") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot
