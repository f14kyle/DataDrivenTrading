df.comparison
head(df.comparison)
i in subset(df.comparison,needs.update == TRUE)$target.symbol)
i in subset(df.comparison,needs.update == TRUE)$target.symbol
for (i in subset(df.comparison,needs.update == TRUE)$target.symbol){}
for (i in subset(df.comparison,needs.update == TRUE)$target.symbol){print "hello"}
for (i in subset(df.comparison,needs.update == TRUE)$target.symbol){x = x + i}
head(df.comparison)
?write.table
?write.zoo
?write.table
rm(list=ls())
library(readxl)
library(quantmod)
directory = "D:/Github/DataDrivenTrading/"
data_path = "D:/Github/DataDrivenTrading/Data/OHLC/"
setwd(directory)
# Reads in last update information
df.existing = read.table("log.csv",header = TRUE,sep = ",", stringsAsFactors=F)
# Load list of target instruments
df.target <- data.frame(read_excel("etfdb_data.xls"))
colnames(df.target) = c("symbol","name","etfdb.category","inception.date","expense.ratio","commission.free","expenses.rating")
# Create a dataframe that contains information on what data to fetch
df.comparison = data.frame("target.symbol" = df.target$symbol,
"target.exists" = rep(NA,nrow(df.target)),
"target.updated" = rep(NA,nrow(df.target)),
stringsAsFactors=FALSE)
# Perform comparisons to determine if target instrument exists and if it is updated
for (i in 1:nrow(df.comparison)){
df.comparison$target.exists[i] = df.target$symbol[i] %in% df.existing$fetched.symbol
df.comparison$target.updated[i] = Sys.Date() == df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
}
# If target instrument does not exist or if it not updated, it should be re-scraped
df.comparison["needs.update"] = !(df.comparison$target.exists & df.comparison$target.updated)
df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)
df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
df.existing$fetched.date
[grep(df.target$symbol[i],df.existing$fetched.symbol)]
grep(df.target$symbol[i],df.existing$fetched.symbol)
i
grep(df.target$symbol[10],df.existing$fetched.symbol)
for (i in 1:nrow(df.comparison)){
df.comparison$target.exists[i] = df.target$symbol[i] %in% df.existing$fetched.symbol
df.comparison$target.updated[i] = try(Sys.Date() == df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)])
}
df.comparison
Sys.Date() == df.existing$fetched.date
df.existing$fetched.date[316] = TRUE
df.existing$fetched.date
df.existing$fetched.date[316] = as.Date("2016-10-03")
df.existing$fetched.date
"2016-10-02" == df.existing$fetched.date
# Reads in last update information
df.existing = read.table("log.csv",header = TRUE,sep = ",", stringsAsFactors=F)
# Load list of target instruments
df.target <- data.frame(read_excel("etfdb_data.xls"))
colnames(df.target) = c("symbol","name","etfdb.category","inception.date","expense.ratio","commission.free","expenses.rating")
# Create a dataframe that contains information on what data to fetch
df.comparison = data.frame("target.symbol" = df.target$symbol,
"target.exists" = rep(NA,nrow(df.target)),
"target.updated" = Sys.Date() == df.existing$fetched.date,
stringsAsFactors=FALSE)
# Perform comparisons to determine if target instrument exists and if it is updated
for (i in 1:nrow(df.comparison)){
df.comparison$target.exists[i] = df.target$symbol[i] %in% df.existing$fetched.symbol
}
rm(list=ls())
library(readxl)
library(quantmod)
directory = "D:/Github/DataDrivenTrading/"
data_path = "D:/Github/DataDrivenTrading/Data/OHLC/"
setwd(directory)
# Reads in last update information
df.existing = read.table("log.csv",header = TRUE,sep = ",", stringsAsFactors=F)
# Load list of target instruments
df.target <- data.frame(read_excel("etfdb_data.xls"))
colnames(df.target) = c("symbol","name","etfdb.category","inception.date","expense.ratio","commission.free","expenses.rating")
# Create a dataframe that contains information on what data to fetch
df.comparison = data.frame("target.symbol" = df.target$symbol,
"target.exists" = rep(NA,nrow(df.target)),
"target.updated" = Sys.Date() == df.existing$fetched.date,
stringsAsFactors=FALSE)
# Perform comparisons to determine if target instrument exists and if it is updated
for (i in 1:nrow(df.comparison)){
df.comparison$target.exists[i] = df.target$symbol[i] %in% df.existing$fetched.symbol
}
df.comparison
# Create a dataframe that contains information on what data to fetch
df.comparison = data.frame("target.symbol" = df.target$symbol,
"target.exists" = rep(NA,nrow(df.target)),
"target.updated" = Sys.Date() == df.existing$fetched.date,
stringsAsFactors=FALSE)
df.target <- data.frame(read_excel("etfdb_data.xls"))
df.target
# Create a dataframe that contains information on what data to fetch
df.comparison = data.frame("target.symbol" = df.target$symbol,
"target.exists" = rep(NA,nrow(df.target)),
"target.updated" = Sys.Date() == df.existing$fetched.date,
stringsAsFactors=FALSE)
df.target
df.target$symbol
nrow(df.target$symbol)
class(df.target$symbol)
# Create a dataframe that contains information on what data to fetch
df.comparison = data.frame("target.symbol" = df.target$symbol,
"target.exists" = rep(NA,nrow(df.target)),
"target.updated" = Sys.Date() == df.existing$fetched.date,
stringsAsFactors=FALSE)
nrow(df.target)
nrow(df.target$symbol)
df.target$symbol
p = df.target$symbol
nrow(p)
length(p)
df.comparison = data.frame("target.symbol" = df.target$symbol,
"target.exists" = rep(NA,length(df.target)),
"target.updated" = Sys.Date() == df.existing$fetched.date,
stringsAsFactors=FALSE)
df.target$symbol
length(df.target$symbol)
df.comparison = data.frame("target.symbol" = df.target$symbol,
"target.exists" = rep(NA,nrow(df.target))
)
head(df.existing)
nrow(df.existing)
grep(df.target.symbol[i],df.existing$fetched.symbol)
grep(df.target$symbol[i],df.existing$fetched.symbol)
grep(df.target$symbol[100],df.existing$fetched.symbol)
for (i in 1:nrow(df.comparison)){
df.comparison$target.exists[i] = df.target$symbol[i] %in% df.existing$fetched.symbol
df.comparison$target.updated[i] = Sys.Date() == df.existing$fetched.date[grep(df.target$symbol[100],df.existing$fetched.symbol)]
}
for (i in 1:nrow(df.comparison)){
tryCatch({
if (target.exists == TRUE & target.updated == FALSE){
startDate = df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
from = startDate,
auto.assign = FALSE)
write.table(data,paste(data_path,ticker,".csv",sep = ""), append = TRUE, sep = ",")
}
if (target.exists == FALSE){
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adjusted")
write.zoo(data,paste(data_path,ticker,".csv",sep = ""),sep=",",row.names=FALSE) # sep = "" to get rid of space in paste operations
# when successful write status to log
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"success")
}
},
# when there is an error, write error
error = function(e) {
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"failure")
})
}
# Recreate log
df.log = data.frame("fetched.symbol" = character(),
"fetched.date" = as.Date(character()),
"fetched.status" = character(),
stringsAsFactors=FALSE)
# If target exists and the target is updated, do nothing
# If target exists and the target is not updated, append data to existing CSV from last fetched date
# If target does not exist, scrape
for (i in 1:nrow(df.comparison)){
tryCatch({
if (target.exists == TRUE & target.updated == FALSE){
startDate = df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
from = startDate,
auto.assign = FALSE)
write.table(data,paste(data_path,ticker,".csv",sep = ""), append = TRUE, sep = ",")
}
if (target.exists == FALSE){
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adjusted")
write.zoo(data,paste(data_path,ticker,".csv",sep = ""),sep=",",row.names=FALSE) # sep = "" to get rid of space in paste operations
# when successful write status to log
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"success")
}
},
# when there is an error, write error
error = function(e) {
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"failure")
})
}
# If target does not exist, scrape
for (i in 1:nrow(df.comparison)){
tryCatch({
if (target.exists == TRUE & target.updated == FALSE){
startDate = df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
from = startDate,
auto.assign = FALSE)
write.table(data,paste(data_path,ticker,".csv",sep = ""), append = TRUE, sep = ",")
}
if (target.exists == FALSE){
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adjusted")
write.zoo(data,paste(data_path,ticker,".csv",sep = ""),sep=",",row.names=FALSE) # sep = "" to get rid of space in paste operations
# when successful write status to log
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"success")
}
},
# when there is an error, write error
error = function(e) {
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"failure")
})
}
df.log
df.comparison
for (i in 1:nrow(df.comparison)){
tryCatch({
target.exists = df.comparison$target.exists[i]
target.updated = df.comparison$target.updated[i]
if (target.exists == TRUE & target.updated == FALSE){
startDate = df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
from = startDate,
auto.assign = FALSE)
write.table(data,paste(data_path,ticker,".csv",sep = ""), append = TRUE, sep = ",")
}
if (target.exists == FALSE){
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adjusted")
write.zoo(data,paste(data_path,ticker,".csv",sep = ""),sep=",",row.names=FALSE) # sep = "" to get rid of space in paste operations
# when successful write status to log
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"success")
}
},
# when there is an error, write error
error = function(e) {
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"failure")
})
}
df.log
df.log
df.log
data
library(quantmod)
for (i in 1:nrow(df.comparison)){
tryCatch({
target.exists = df.comparison$target.exists[i]
target.updated = df.comparison$target.updated[i]
if (target.exists == TRUE & target.updated == FALSE){
startDate = df.existing$fetched.date[grep(df.target$symbol[i],df.existing$fetched.symbol)]
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
from = startDate,
auto.assign = FALSE)
write.table(data,paste(data_path,ticker,".csv",sep = ""), append = TRUE, sep = ",")
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"success")
}
if (target.exists == FALSE){
ticker = df.comparison$target.symbol[i]
data = getSymbols(Symbols = ticker,
src = "yahoo",
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adjusted")
write.zoo(data,paste(data_path,ticker,".csv",sep = ""),sep=",",row.names=FALSE) # sep = "" to get rid of space in paste operations
# when successful write status to log
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"success")
}
},
# when there is an error, write error
error = function(e) {
df.log[nrow(df.log) + 1,] =c(i,as.character(Sys.Date()),"failure")
})
}
df.log
rm(list=ls())
library(readxl)
library(quantmod)
library(R.utils) # for countlines
directory = "C:/UserData/DataDrivenTrading/"
data_path = "C:/UserData/DataDrivenTrading/Data/OHLC/"
setwd(directory)
install.packages("R.utils")
countLines("D:/Github/DataDrivenTrading/Data/OHLC/CATH.csv")
?countlines
library(R.utils)
countLines("D:/Github/DataDrivenTrading/Data/OHLC/CATH.csv")
x = countLines("D:/Github/DataDrivenTrading/Data/OHLC/CATH.csv")
x
class(x)
x = countLines("D:/Github/DataDrivenTrading/Data/OHLC/CATH.csv")
x == 112
kaka = "D:/Github/DataDrivenTrading/Data/OHLC/CATH.csv"
read.csv(kaka,nrow = 1,skip = 112)
read.csv(kaka,nrow = 1,skip = 111)
read.csv(kaka,nrow = 1,skip = 110)
read.csv(kaka,nrow = 1,skip = 109)
read.csv(kaka,nrow = 1,skip = 110)
read.csv(kaka,nrow = 1,skip = 111)
read.csv(kaka,nrow = 1,skip = 110)
read.csv(kaka,nrow = 1,skip = 1)
read.csv(kaka,nrow = 1,skip = 0)
?read.csv
read.csv(kaka,header = FALSE, nrow = 1,skip = 0)
read.csv(kaka,header = TRUE, nrow = 1,skip = 0)
read.csv(kaka,header = TRUE, nrow = 1,skip = x)
read.csv(kaka,header = TRUE, nrow = 1,skip = 112)
read.csv(kaka,header = TRUE, nrow = 1,skip = 111)
read.csv(kaka,header = TRUE, nrow = 1,skip = 110)
read.csv(kaka,header = TRUE, nrow = 1,skip = 110)
read.csv(kaka,header = TRUE, nrow = 1,skip = 109)
read.csv(kaka,header = TRUE, nrow = 1,skip = 110)
read.csv(kaka,header = TRUE, nrow = 1,skip = 111)
read.csv(kaka,header = TRUE, nrow = 1,skip = 110)
read.csv(kaka,header = FALSE, nrow = 1,skip = 110)
read.csv(kaka,header = FALSE, nrow = 1,skip = 111)
read.csv(kaka,header = FALSE, nrow = 1,skip = 111)[1]
read.csv(kaka,header = FALSE, nrow = 1,skip = 111)[1]
source('/Volumes/DATA/Github/DataDrivenTrading/etfdb_data_scraper.R')
getwd()
install.packages("readxl")
install.packages("readxl")
install.packages("quantmod")
install.packages("rPref")
install.packages("ggplot2")
install.packages("ggrepel")
install.packages("scales")
install.packages("gridExtra")
# Load libraries
library(readxl)
library(quantmod)
#library(rvest) # for read_html
library(rPref)
library(ggplot2)
library(ggrepel)
library(scales)
library(gridExtra)
# Load list of ETFs
df <- data.frame(read_excel("etfdb_data.xls"))
colnames(df) = c("symbol","name","etfdb.category","inception.date","expense.ratio","commission.free","expenses.rating")
# Correct Excel format date for inception date
df$inception.date = as.Date(df$inception.date,origin = "1899-12-30")
df["c.issuer"] = NA
# Load latest set of scraped sites from ETFdb.com
#load("20160930_allsites.rda")
# Create requisite columns
df["c.issuer"] = gsub( " .*$", "", df$name )
df["c.structure"] = NA
df["c.expense.ratio"] = NA
df["c.inception.date"] = NA
df["c.tax.form"] = NA
df["c.tracking.index"] = NA
n.top = 10
df.ac = psel(subset(df,etfdb.category == "All Cap Equities"),low(expense.ratio),top = n.top)
df.lcb = psel(subset(df,etfdb.category == "Large Cap Blend Equities"),low(expense.ratio),top = n.top)
df.lcg = psel(subset(df,etfdb.category == "Large Cap Growth Equities"),low(expense.ratio),top = n.top)
df.lcv = psel(subset(df,etfdb.category == "Large Cap Value Equities"),low(expense.ratio),top = n.top)
df.mcb = psel(subset(df,etfdb.category == "Mid Cap Blend Equities"),low(expense.ratio),top = n.top)
df.mcg = psel(subset(df,etfdb.category == "Mid Cap Growth Equities"),low(expense.ratio),top = n.top)
df.mcv = psel(subset(df,etfdb.category == "Mid Cap Value Equities"),low(expense.ratio),top = n.top)
df.scb = psel(subset(df,etfdb.category == "Small Cap Blend Equities"),low(expense.ratio),top = n.top)
df.scg = psel(subset(df,etfdb.category == "Small Cap Growth Equities"),low(expense.ratio),top = n.top)
df.scv = psel(subset(df,etfdb.category == "Small Cap Value Equities"),low(expense.ratio),top = n.top)
# Plot box-whisker for each category
df
plot.box = ggplot(df,aes(x = etfdb.category,y = expense.ratio)) +
geom_boxplot(outlier.colour = "black", outlier.size = ) +
geom_jitter(aes(colour = etfdb.category)) +
scale_y_continuous(labels = percent,breaks = scales::pretty_breaks(n = 10)) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
# Plot cheapest 10 ETFs per category
plot.allcap = ggplot() +
geom_point(data = df.ac,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.ac,aes(x = c.issuer,y = expense.ratio,label = df.ac$symbol)) +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.lcb = ggplot() +
geom_point(data = df.lcb,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.lcb,aes(x = c.issuer,y = expense.ratio,label = df.lcb$symbol)) +
ggtitle("Large Cap Blend") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.lcg = ggplot() +
geom_point(data = df.lcg,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.lcg,aes(x = c.issuer,y = expense.ratio,label = df.lcg$symbol)) +
ggtitle("Large Cap Growth") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.lcv = ggplot() +
geom_point(data = df.lcv,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.lcv,aes(x = c.issuer,y = expense.ratio,label = df.lcv$symbol)) +
ggtitle("Large Cap Value") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.mcb = ggplot() +
geom_point(data = df.mcb,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.mcb,aes(x = c.issuer,y = expense.ratio,label = df.mcb$symbol)) +
ggtitle("Small Cap Blend") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.mcg = ggplot() +
geom_point(data = df.mcg,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.mcg,aes(x = c.issuer,y = expense.ratio,label = df.mcg$symbol)) +
ggtitle("Mid Cap Growth") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.mcv = ggplot() +
geom_point(data = df.mcv,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.mcv,aes(x = c.issuer,y = expense.ratio,label = df.mcv$symbol)) +
ggtitle("Mid Cap Value") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.scb = ggplot() +
geom_point(data = df.scb,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.scb,aes(x = c.issuer,y = expense.ratio,label = df.scb$symbol)) +
ggtitle("Small Cap Blend") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.scg = ggplot() +
geom_point(data = df.scg,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.scg,aes(x = c.issuer,y = expense.ratio,label = df.scg$symbol)) +
ggtitle("Small Cap Growth") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
plot.scv = ggplot() +
geom_point(data = df.scv,aes(x = c.issuer,y = expense.ratio)) +
geom_text_repel(data = df.scv,aes(x = c.issuer,y = expense.ratio,label = df.scv$symbol)) +
ggtitle("Small Cap Value") +
scale_y_continuous(labels = percent) +
theme(legend.title=element_blank(),
legend.position = "top",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
grid.arrange(plot.lcv,plot.lcb,plot.lcg,plot.mcv,plot.mcb,plot.mcg,plot.scv,plot.scb,plot.scg,ncol = 3)
#for (i in 1:nrow(df)){
#  cast <- html_nodes(all.sites[[i]], ".pull-right")
#  df$c.issuer[i] = html_text(cast)[6]
#  df$c.structure[i] = html_text(cast)[7]
#  df$c.expense.ratio[i] = html_text(cast)[8]
#  df$c.inception.date[i] = html_text(cast)[10]
#  df$c.tax.form[i] = html_text(cast)[11]
#  df$c.tracking.index[i] = html_text(cast)[12]
#}
#for (i in 1:nrow(df)){
#cast <- try(html_nodes(all.sites[[i]], "span"))
#df$c.issuer[i] = try(html_text(cast)[6])
#df$c.structure[i] = try(html_text(cast)[7])
##  df$c.expense.ratio[i] = try(html_text(cast)[8])
#  df$c.inception.date[i] = try(html_text(cast)[10])
#  df$c.tax.form[i] = try(html_text(cast)[11])
#  df$c.tracking.index[i] = try(html_text(cast)[12])
#}
plot.lcg
grid.arrange(plot.lcv,plot.lcb,plot.lcg,plot.mcv,plot.mcb,plot.mcg,plot.scv,plot.scb,plot.scg,ncol = 3)
install.packages("knitr")
