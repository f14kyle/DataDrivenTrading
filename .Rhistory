load("/Volumes/DATA/Github/DataDrivenTrading/etf_data.rda")
df
head(df)
rm(df)
load("/Volumes/DATA/Github/DataDrivenTrading/etfdb_data.rda")
df
head(df)
f <- data.frame(read_excel("etfdb_data.xls"))
colnames(df) = c("symbol","name","etfdb.category","inception.date","expense.ratio","commission.free","expenses.rating")
# Correct Excel format date for inception date
df$inception.date = as.Date(df$inception.date,origin = "1899-12-30")
df["c.issuer"] = gsub( " .*$", "", df$name )
n.top = 10
df.ac = psel(subset(df,etfdb.category == "All Cap Equities"),low(expense.ratio),top = n.top)
df.lcb = psel(subset(df,etfdb.category == "Large Cap Blend Equities"),low(expense.ratio),top = n.top)
df.lcg = psel(subset(df,etfdb.category == "Large Cap Growth Equities"),low(expense.ratio),top = n.top)
df.lcv = psel(subset(df,etfdb.category == "Large Cap Value Equities"),low(expense.ratio),top = n.top)
df.mcb = psel(subset(df,etfdb.category == "Mid Cap Blend Equities"),low(expense.ratio),top = n.top)
df.mcg = psel(subset(df,etfdb.category == "Mid Cap Growth Equities"),low(expense.ratio),top = n.top)
df.mcv = psel(subset(df,etfdb.category == "Mid Cap Value Equities"),low(expense.ratio),top = n.top)
df.scb = psel(subset(df,etfdb.category == "Small Cap Blend Equities"),low(expense.ratio),top = n.top)
df.scg = psel(subset(df,etfdb.category == "Small Cap Growth Equities"),low(expense.ratio),top = n.top)
df.scv = psel(subset(df,etfdb.category == "Small Cap Value Equities"),low(expense.ratio),top = n.top)
library(readxl)
library(rPref)
f <- data.frame(read_excel("etfdb_data.xls"))
colnames(df) = c("symbol","name","etfdb.category","inception.date","expense.ratio","commission.free","expenses.rating")
# Correct Excel format date for inception date
df$inception.date = as.Date(df$inception.date,origin = "1899-12-30")
df["c.issuer"] = gsub( " .*$", "", df$name )
n.top = 10
df.ac = psel(subset(df,etfdb.category == "All Cap Equities"),low(expense.ratio),top = n.top)
df.lcb = psel(subset(df,etfdb.category == "Large Cap Blend Equities"),low(expense.ratio),top = n.top)
df.lcg = psel(subset(df,etfdb.category == "Large Cap Growth Equities"),low(expense.ratio),top = n.top)
df.lcv = psel(subset(df,etfdb.category == "Large Cap Value Equities"),low(expense.ratio),top = n.top)
df.mcb = psel(subset(df,etfdb.category == "Mid Cap Blend Equities"),low(expense.ratio),top = n.top)
df.mcg = psel(subset(df,etfdb.category == "Mid Cap Growth Equities"),low(expense.ratio),top = n.top)
df.mcv = psel(subset(df,etfdb.category == "Mid Cap Value Equities"),low(expense.ratio),top = n.top)
df.scb = psel(subset(df,etfdb.category == "Small Cap Blend Equities"),low(expense.ratio),top = n.top)
df.scg = psel(subset(df,etfdb.category == "Small Cap Growth Equities"),low(expense.ratio),top = n.top)
df.scv = psel(subset(df,etfdb.category == "Small Cap Value Equities"),low(expense.ratio),top = n.top)
load("/Volumes/DATA/Github/DataDrivenTrading/2016-10-01 20161001_etfdb_allsites.rda")
all.sites
df
head(df)
table(c.issuer)
table(df$c.issuer)
head(df)
setwd("/Volumes/DATA/Github/DataDrivenTrading")
#
library(ggplot2) # for ggplot
library(scales) # for percent
# generate
load("df_lazy.rda")
load("df_pareto_dd.rda")
load("df_pareto_pi.rda")
setwd("/Volumes/DATA/Github/DataDrivenTrading")
load(df_lazy.rda)
getwd()
load("df_lazy.rda")
library(quantmod)
library(PerformanceAnalytics)
library(openxlsx)
library(ggplot2)
library(gridExtra)
library(scales)
library(RColorBrewer)
library(reshape2)
library(rPref)
load("df_lazy.rda")
####################################
# Calculate paretos for CAGR vs DD
pareto.dd.yearly = vector("list", 4)
# Select correct timeframe in df.lazy based on timeframe and rebalance period
df.lazy.yearly = subset(df.lazy,Rebalance.Period == "Yearly")
timeframe.selector = sapply(timeframe.codes, function(x) grepl(x,df.lazy.yearly$Timeframe))
for (i in 1:timeframe.count){
pareto.dd.yearly[[i]] = psel(df.lazy.yearly[as.array(timeframe.selector[,i]),],high(as.numeric(CAGR)) * low(as.numeric(DD)), top_level = 3)
}
df.pareto.dd = data.frame()
for (i in 1:timeframe.count){
df.pareto.dd = rbind(df.pareto.dd,data.frame(pareto.dd.yearly[[i]]))
}
save(data = df.pareto.dd,file = "df_pareto_dd.rda")
##############################################################
# Calculate paretos for CAGR vs PI
pareto.pi.none = vector("list", 4)
pareto.pi.yearly = vector("list", 4)
pareto.pi.quarterly = vector("list",4)
pareto.pi.monthly = vector("list",4)
# Select correct timeframe in df.lazy based on timeframe and rebalance period
timeframe.selector = sapply(timeframe.codes, function(x) grepl(x,df.lazy$Timeframe))
rebalance.selector = sapply(rebalance.periods,function(x) grepl(x,df.lazy$Rebalance.Period))
for (i in 1:timeframe.count){
#   pareto.pi.none[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,1]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
pareto.pi.yearly[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,2]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
#    pareto.pi.quarterly[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,3]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
#    pareto.pi.monthly[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,4]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
}
df.pareto.pi = data.frame()
for (i in 1:timeframe.count){
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.none[[i]]))
df.pareto.pi = rbind(df.pareto.dd,data.frame(pareto.pi.yearly[[i]]))
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.quarterly[[i]]))
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.monthly[[i]]))
}
save(data = df.pareto.pi,file = "df_pareto_pi.rda")
# Set timeframes
timeframe.codes = c("2016","2015","2014","2013","2012","2011","2010","2009","2008","2007")
timeframe.count = length(timeframe.codes)
####################################
# Calculate paretos for CAGR vs DD
pareto.dd.yearly = vector("list", 4)
# Select correct timeframe in df.lazy based on timeframe and rebalance period
df.lazy.yearly = subset(df.lazy,Rebalance.Period == "Yearly")
timeframe.selector = sapply(timeframe.codes, function(x) grepl(x,df.lazy.yearly$Timeframe))
for (i in 1:timeframe.count){
pareto.dd.yearly[[i]] = psel(df.lazy.yearly[as.array(timeframe.selector[,i]),],high(as.numeric(CAGR)) * low(as.numeric(DD)), top_level = 3)
}
df.pareto.dd = data.frame()
for (i in 1:timeframe.count){
df.pareto.dd = rbind(df.pareto.dd,data.frame(pareto.dd.yearly[[i]]))
}
save(data = df.pareto.dd,file = "df_pareto_dd.rda")
##############################################################
# Calculate paretos for CAGR vs PI
pareto.pi.none = vector("list", 4)
pareto.pi.yearly = vector("list", 4)
pareto.pi.quarterly = vector("list",4)
pareto.pi.monthly = vector("list",4)
# Select correct timeframe in df.lazy based on timeframe and rebalance period
timeframe.selector = sapply(timeframe.codes, function(x) grepl(x,df.lazy$Timeframe))
rebalance.selector = sapply(rebalance.periods,function(x) grepl(x,df.lazy$Rebalance.Period))
for (i in 1:timeframe.count){
#   pareto.pi.none[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,1]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
pareto.pi.yearly[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,2]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
#    pareto.pi.quarterly[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,3]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
#    pareto.pi.monthly[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,4]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
}
df.pareto.pi = data.frame()
for (i in 1:timeframe.count){
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.none[[i]]))
df.pareto.pi = rbind(df.pareto.dd,data.frame(pareto.pi.yearly[[i]]))
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.quarterly[[i]]))
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.monthly[[i]]))
}
save(data = df.pareto.pi,file = "df_pareto_pi.rda")
####################################
# Calculate paretos for CAGR vs DD
pareto.dd.yearly = vector("list", 4)
# Select correct timeframe in df.lazy based on timeframe and rebalance period
df.lazy.yearly = subset(df.lazy,Rebalance.Period == "Yearly")
timeframe.selector = sapply(timeframe.codes, function(x) grepl(x,df.lazy.yearly$Timeframe))
for (i in 1:timeframe.count){
pareto.dd.yearly[[i]] = psel(df.lazy.yearly[as.array(timeframe.selector[,i]),],high(as.numeric(CAGR)) * low(as.numeric(DD)), top_level = 3)
}
df.pareto.dd = data.frame()
for (i in 1:timeframe.count){
df.pareto.dd = rbind(df.pareto.dd,data.frame(pareto.dd.yearly[[i]]))
}
save(data = df.pareto.dd,file = "df_pareto_dd.rda")
##############################################################
# Calculate paretos for CAGR vs PI
#pareto.pi.none = vector("list", 4)
pareto.pi.yearly = vector("list", 4)
#pareto.pi.quarterly = vector("list",4)
#pareto.pi.monthly = vector("list",4)
# Select correct timeframe in df.lazy based on timeframe and rebalance period
timeframe.selector = sapply(timeframe.codes, function(x) grepl(x,df.lazy.yearly$Timeframe))
#rebalance.selector = sapply(rebalance.periods,function(x) grepl(x,df.lazy$Rebalance.Period))
for (i in 1:timeframe.count){
#   pareto.pi.none[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,1]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
pareto.pi.yearly[[i]] = psel(df.lazy.yearly[as.array(timeframe.selector[,i]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
#    pareto.pi.quarterly[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,3]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
#    pareto.pi.monthly[[i]] = psel(df.lazy[as.array(timeframe.selector[,i] & rebalance.selector[,4]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
}
df.pareto.pi = data.frame()
for (i in 1:timeframe.count){
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.none[[i]]))
df.pareto.pi = rbind(df.pareto.dd,data.frame(pareto.pi.yearly[[i]]))
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.quarterly[[i]]))
#  df.pareto.pi = rbind(df.pareto,data.frame(pareto.pi.monthly[[i]]))
}
save(data = df.pareto.pi,file = "df_pareto_pi.rda")
df.pareto.dd.rda
df.pareto.dd
df.pareto.pi
pareto.dd.yearly = vector("list", 4)
# Select correct timeframe in df.lazy based on timeframe and rebalance period
df.lazy.yearly = subset(df.lazy,Rebalance.Period == "Yearly")
timeframe.selector = sapply(timeframe.codes, function(x) grepl(x,df.lazy.yearly$Timeframe))
for (i in 1:timeframe.count){
pareto.dd.yearly[[i]] = psel(df.lazy.yearly[as.array(timeframe.selector[,i]),],high(as.numeric(CAGR)) * low(as.numeric(DD)), top_level = 3)
}
df.pareto.dd = data.frame()
for (i in 1:timeframe.count){
df.pareto.dd = rbind(df.pareto.dd,data.frame(pareto.dd.yearly[[i]]))
}
save(data = df.pareto.dd,file = "df_pareto_dd.rda")
####################################
# Calculate paretos for CAGR vs pi
pareto.pi.yearly = vector("list", 4)
# Select correct timeframe in df.lazy based on timeframe and rebalance period
df.lazy.yearly = subset(df.lazy,Rebalance.Period == "Yearly")
timeframe.selector = sapply(timeframe.codes, function(x) grepl(x,df.lazy.yearly$Timeframe))
for (i in 1:timeframe.count){
pareto.pi.yearly[[i]] = psel(df.lazy.yearly[as.array(timeframe.selector[,i]),],high(as.numeric(CAGR)) * low(as.numeric(PI)), top_level = 3)
}
df.pareto.pi = data.frame()
for (i in 1:timeframe.count){
df.pareto.pi = rbind(df.pareto.pi,data.frame(pareto.pi.yearly[[i]]))
}
save(data = df.pareto.pi,file = "df_pareto_pi.rda")
